import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { DrawerPanel } from "@/components/ui/DrawerPanel";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { showSuccess, showError } from "@/lib/toast-helpers";
import { X, Image as ImageIcon, CalendarIcon } from "lucide-react";
import { CreativePickerModal } from "./CreativePickerModal";
import { AddNewCreativeDrawer } from "./AddNewCreativeDrawer";
import { AddNewLandingPageDrawer } from "./AddNewLandingPageDrawer";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { buildUTMUrl } from "@/lib/utm-helpers";

interface EditAdDrawerProps {
  open: boolean;
  onClose: () => void;
  onSuccess?: () => void;
  ad: {
    id: string;
    campaign_id: string;
    campaign?: string; // campaign name (from join)
    audience_type: string;
    ad_format: string;
    creative_type: string;
    version: string;
    headline: string | null;
    body: string | null; // renamed from primary_text
    landing_page_url: string;
    landing_page_id?: string | null;
    status: string;
    medium: string | null;
    source: string | null;
    cta_label: string | null;
    ad_name?: string | null;
    ad_set_name?: string | null;
    attached_creatives?: any[];
  } | null;
}

interface Message {
  id: string;
  campaign: string;
  headline: string | null;
  primary_text: string | null;
}

interface LandingPage {
  id: string;
  url: string;
  name: string | null;
  campaigns: string[] | null;
}

export function EditAdDrawer({
  open,
  onClose,
  onSuccess,
  ad
}: EditAdDrawerProps) {
  const { user } = useAuth();
  const [currentStep, setCurrentStep] = useState<1 | 2>(1);
  const [loading, setLoading] = useState(false);
  const [showCreativePicker, setShowCreativePicker] = useState(false);
  const [showCreateCreative, setShowCreateCreative] = useState(false);
  const [showLandingPagePicker, setShowLandingPagePicker] = useState(false);
  const [showCreateLandingPage, setShowCreateLandingPage] = useState(false);
  
  // Data lists
  const [campaigns, setCampaigns] = useState<string[]>([]);
  const [audienceTypes, setAudienceTypes] = useState<string[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [landingPages, setLandingPages] = useState<LandingPage[]>([]);
  const [campaignMessaging, setCampaignMessaging] = useState<{
    headlines: string[];
    primaryTexts: string[];
  }>({ headlines: [], primaryTexts: [] });
  
  // Step 1 fields
  const [status, setStatus] = useState("Draft");
  const [campaign, setCampaign] = useState<string | undefined>(undefined);
  const [campaignId, setCampaignId] = useState("");
  const [audienceType, setAudienceType] = useState("");
  const [selectedCreatives, setSelectedCreatives] = useState<any[]>([]);
  
  // Step 2 fields
  const [headline, setHeadline] = useState("");
  const [primaryText, setPrimaryText] = useState("");
  const [landingPageId, setLandingPageId] = useState("");
  const [displayLink, setDisplayLink] = useState("");
  const [source, setSource] = useState("Meta");
  const [medium, setMedium] = useState("paid_social");
  const [cta, setCta] = useState("");
  const [showCustomSource, setShowCustomSource] = useState(false);
  const [customSource, setCustomSource] = useState("");
  const [showCustomMedium, setShowCustomMedium] = useState(false);
  const [customMedium, setCustomMedium] = useState("");
  const [showCustomAudience, setShowCustomAudience] = useState(false);
  const [customAudience, setCustomAudience] = useState("");
  
  // Add new headline/primary text states
  const [showAddHeadline, setShowAddHeadline] = useState(false);
  const [showAddPrimaryText, setShowAddPrimaryText] = useState(false);
  const [newHeadlineText, setNewHeadlineText] = useState("");
  const [newPrimaryTextText, setNewPrimaryTextText] = useState("");
  const [isAddingHeadline, setIsAddingHeadline] = useState(false);
  const [isAddingPrimaryText, setIsAddingPrimaryText] = useState(false);
  
  // Add new landing page state
  const [showAddLandingPage, setShowAddLandingPage] = useState(false);
  const [newLandingPageName, setNewLandingPageName] = useState("");
  const [newLandingPageUrl, setNewLandingPageUrl] = useState("");
  const [isAddingLandingPage, setIsAddingLandingPage] = useState(false);
  
  // Generated values
  const [generatedAdName, setGeneratedAdName] = useState("");
  const [generatedAdSetName, setGeneratedAdSetName] = useState("");
  const [generatedUtmUrl, setGeneratedUtmUrl] = useState("");
  const [calculatedVersion, setCalculatedVersion] = useState("");
  
  // New Meta export fields
  const [adSetName, setAdSetName] = useState("");
  const [objective, setObjective] = useState("");
  const [campaignBudget, setCampaignBudget] = useState("");
  const [startTime, setStartTime] = useState<Date | undefined>();
  const [ageMax, setAgeMax] = useState("64");

  // CTA options per platform
  const ctaOptions: Record<string, string[]> = {
    "Meta": [
      "Book Now",
      "Contact Us",
      "Download",
      "Get Offer",
      "Learn More",
      "Shop Now",
      "Sign Up"
    ],
    "LinkedIn": [
      "Learn More",
      "Visit Website",
      "Register Now",
      "Sign Up",
      "Download",
      "Apply Now"
    ],
    "Google": [
      "Learn More",
      "Get Quote",
      "Subscribe",
      "Book Now",
      "Download",
      "Contact Us"
    ],
    "TikTok": [
      "Learn More",
      "Shop Now",
      "Sign Up",
      "Download Now",
      "Contact Us"
    ],
    "YouTube": [
      "Learn More",
      "Book Now",
      "Get Quote",
      "Subscribe"
    ]
  };

  // Medium mapping per platform
  const mediumMapping: Record<string, string> = {
    "Meta": "paid_social",
    "LinkedIn": "paid_social",
    "Google": "cpc",
    "TikTok": "paid_social",
    "YouTube": "paid_video"
  };

  // Get filtered CTAs based on source
  const availableCtAs = ctaOptions[source] || [];
  
  // Get medium based on source
  const getMediumForSource = (sourceValue: string) => {
    return mediumMapping[sourceValue] || "paid_social";
  };

  // Pre-fill form when ad changes
  useEffect(() => {
    if (open && ad && user) {
      console.log('[EditAdDrawer] Pre-filling form with ad:', {
        adId: ad.id,
        campaign: ad.campaign,
        landingPageId: ad.landing_page_id,
        landingPageUrl: ad.landing_page_url
      });
      
      // Pre-fill Step 1 fields
      setStatus(ad.status || "Draft");
      setCampaignId(ad.campaign_id);
      setAudienceType(ad.audience_type);
      setSource(ad.source || "Meta");
      setMedium(ad.medium || "paid_social");
      
      // Fetch data first, then set campaign after campaigns list is loaded
      const fetchAndSetCampaign = async () => {
        await fetchCampaigns();
        // Set campaign after campaigns are fetched
        if (ad.campaign) {
          setCampaign(ad.campaign);
        }
      };
      fetchAndSetCampaign();
      
      // Pre-fill Step 2 fields
      setHeadline(ad.headline || "");
      setPrimaryText(ad.body || "");
      setLandingPageId(ad.landing_page_id || "");
      setDisplayLink((ad as any).display_link || "");
      setCta(ad.cta_label || "");
      
      // Pre-fill Meta export fields
      const initialAdSetName = ad.ad_set_name || `${ad.campaign} - ${ad.audience_type}`;
      setAdSetName(initialAdSetName);
      setGeneratedAdSetName(initialAdSetName);
      
      // Pre-fill Ad Name with new format using ad_format
      const initialAdName = ad.ad_name || `${ad.campaign} | ${ad.audience_type} | ${ad.ad_format} | ${ad.version}`;
      setGeneratedAdName(initialAdName);
      
      setObjective((ad as any).objective || "");
      // Fix floating point precision issues when converting budget to string
      const budgetValue = (ad as any).campaign_budget;
      setCampaignBudget(budgetValue ? Math.round(Number(budgetValue) * 100) / 100 + "" : "");
      setStartTime((ad as any).start_time ? new Date((ad as any).start_time) : undefined);
      setAgeMax((ad as any).age_max?.toString() || "64");
      
      console.log('[EditAdDrawer] Set landingPageId to:', ad.landing_page_id);
      
      // Set selected creatives if attached
      if (ad.attached_creatives && ad.attached_creatives.length > 0) {
        setSelectedCreatives(ad.attached_creatives);
      } else {
        setSelectedCreatives([]);
      }

      // Check if source/medium/audience are custom values
      const predefinedSources = ["Meta", "LinkedIn", "Google", "TikTok", "YouTube"];
      const predefinedMediums = ["paid_social", "cpc", "paid_video", "display", "organic", "email"];
      const predefinedAudiences = ["Website Visitors", "Contact List", "Company List", "Engaged Users", "App Users", "Past Purchasers"];
      
      if (ad.source && !predefinedSources.includes(ad.source)) {
        setShowCustomSource(true);
        setCustomSource(ad.source);
      }
      
      if (ad.medium && !predefinedMediums.includes(ad.medium)) {
        setShowCustomMedium(true);
        setCustomMedium(ad.medium);
      }
      
      if (!predefinedAudiences.includes(ad.audience_type)) {
        setShowCustomAudience(true);
        setCustomAudience(ad.audience_type);
      }

      // Fetch remaining data
      fetchAudienceTypes();
      fetchMessages();
      fetchLandingPages();
      
      // If ad has a landing page, ensure it's loaded
      if (ad.landing_page_id && ad.landing_page_url) {
        console.log('[EditAdDrawer] Adding ad landing page to list:', {
          id: ad.landing_page_id,
          url: ad.landing_page_url
        });
        // Temporarily add the ad's landing page to ensure it shows up immediately
        setLandingPages(prev => {
          const exists = prev.find(lp => lp.id === ad.landing_page_id);
          if (!exists) {
            console.log('[EditAdDrawer] Landing page not in list, adding it');
            return [{
              id: ad.landing_page_id,
              url: ad.landing_page_url,
              name: null,
              campaigns: null
            }, ...prev];
          }
          console.log('[EditAdDrawer] Landing page already in list');
          return prev;
        });
      }
    }
  }, [open, ad, user]);

  // Match landing page by URL if landing_page_id is missing but URL exists
  useEffect(() => {
    if (ad && landingPages.length > 0 && !ad.landing_page_id && ad.landing_page_url) {
      const matchingLp = landingPages.find(lp => lp.url === ad.landing_page_url);
      if (matchingLp) {
        console.log('[EditAdDrawer] Matched landing page by URL:', matchingLp);
        setLandingPageId(matchingLp.id);
      }
    }
  }, [ad, landingPages]);

  // Auto-update Ad Set Name when campaign or audience changes
  useEffect(() => {
    if (campaign && audienceType) {
      const autoGeneratedName = `${campaign} - ${audienceType}`;
      // Update if field is empty, matches previous auto-generated value, or is the initial load
      if (!adSetName || adSetName === generatedAdSetName) {
        setAdSetName(autoGeneratedName);
        setGeneratedAdSetName(autoGeneratedName);
      }
    }
  }, [campaign, audienceType]);

  // Fetch campaign messaging when campaign changes
  useEffect(() => {
    const fetchCampaignMessaging = async () => {
      if (!campaign || !user) {
        setCampaignMessaging({ headlines: [], primaryTexts: [] });
        return;
      }

      try {
        const { data } = await supabase
          .from("campaigns")
          .select("messaging")
          .eq("user_id", user.id)
          .eq("name", campaign)
          .single();

        if (data?.messaging) {
          const messaging = data.messaging as any;
          setCampaignMessaging({
            headlines: messaging?.adMessaging?.headlines || [],
            primaryTexts: messaging?.adMessaging?.primaryTexts || []
          });
        } else {
          setCampaignMessaging({ headlines: [], primaryTexts: [] });
        }
      } catch (error) {
        console.error("Error fetching campaign messaging:", error);
        setCampaignMessaging({ headlines: [], primaryTexts: [] });
      }
    };

    fetchCampaignMessaging();
  }, [campaign, user]);

  const fetchCampaigns = async () => {
    try {
      const { data } = await supabase
        .from("campaigns")
        .select("id, name, messaging")
        .eq("user_id", user!.id)
        .order("name");
      
      const campaignNames = data?.map(c => c.name) || [];
      
      // Ensure current ad's campaign is included
      if (ad?.campaign && !campaignNames.includes(ad.campaign)) {
        campaignNames.push(ad.campaign);
        campaignNames.sort();
      }
      
      setCampaigns(campaignNames);
      
      // If we're editing and have a campaign, fetch its messaging
      if (ad?.campaign && data) {
        const selectedCampaign = data.find(c => c.name === ad.campaign);
        if (selectedCampaign?.messaging) {
          const messaging = selectedCampaign.messaging as any;
          setCampaignMessaging({
            headlines: messaging?.adMessaging?.headlines || [],
            primaryTexts: messaging?.adMessaging?.primaryTexts || []
          });
        }
      }
    } catch (error) {
      console.error("Error fetching campaigns:", error);
    }
  };

  const fetchAudienceTypes = async () => {
    try {
      const { data } = await supabase
        .from("ads")
        .select("audience_type")
        .eq("user_id", user!.id);
      
      const unique = Array.from(
        new Set(data?.map(a => a.audience_type).filter(Boolean))
      ).sort() as string[];
      setAudienceTypes(unique);
    } catch (error) {
      console.error("Error fetching audience types:", error);
    }
  };

  const fetchMessages = async () => {
    try {
      const { data } = await supabase
        .from("messaging_matrix")
        .select("id, campaign, headline, primary_text")
        .eq("user_id", user!.id);
      
      setMessages(data || []);
    } catch (error) {
      console.error("Error fetching messages:", error);
    }
  };

  const fetchLandingPages = async () => {
    try {
      const { data } = await supabase
        .from("landing_pages")
        .select("id, url, name, campaigns")
        .eq("user_id", user!.id);
      
      setLandingPages(data || []);
    } catch (error) {
      console.error("Error fetching landing pages:", error);
    }
  };

  // Auto-generated values
  const getAdSetName = () => {
    if (!campaign || !audienceType) return ad?.ad_set_name || "";
    return `${campaign} | ${audienceType}`;
  };

  const getCreativeType = () => {
    // Determine format based on attached creatives
    if (selectedCreatives.length === 0) {
      return "single_image";
    }
    
    if (selectedCreatives.length > 1) {
      return "carousel";
    }
    
    const creativeType = selectedCreatives[0].creative_type;
    if (creativeType === "Image") {
      return "single_image";
    } else if (creativeType === "Video") {
      return "video";
    }
    
    return "single_image";
  };

  const slugify = (text: string) => {
    return text.toLowerCase().replace(/\s*\|\s*/g, '_').replace(/\s+/g, '_');
  };

  // Auto-populate Ad Set Name
  useEffect(() => {
    if (campaign && audienceType && !adSetName) {
      setAdSetName(`${campaign} – ${audienceType}`);
    }
  }, [campaign, audienceType]);

  // Update generated names when dependencies change
  useEffect(() => {
    const updateGeneratedValues = async () => {
      if (!campaign || !audienceType || !user || !campaignId) {
        // Preserve existing values while data is loading
        if (ad) {
          setGeneratedAdName(ad.ad_name || "");
          setGeneratedAdSetName(ad.ad_set_name || "");
        }
        return;
      }

      const adSetNameValue = adSetName || getAdSetName();
      setGeneratedAdSetName(adSetNameValue);

      const creativeType = getCreativeType();
      
      // Check if creative type or audience type has changed from the original ad
      const hasChanged = ad && (
        creativeType !== ad.ad_format || 
        audienceType !== ad.audience_type
      );

      // Use the ad's actual version, ensuring we preserve it
      let version = ad?.version || "v1";
      
      // If creative type or audience type changed, recalculate version
      if (hasChanged) {
        const { data: existingAds } = await supabase
          .from('ads')
          .select('version')
          .eq('campaign_id', campaignId)
          .eq('audience_type', audienceType)
          .eq('ad_format', creativeType)
          .eq('user_id', user.id);

        // Find the highest version number
        let maxVersion = 0;
        existingAds?.forEach(existingAd => {
          const versionMatch = existingAd.version?.match(/^v?(\d+)$/i);
          if (versionMatch) {
            const versionNum = parseInt(versionMatch[1]);
            if (versionNum > maxVersion) {
              maxVersion = versionNum;
            }
          }
        });

        version = `v${maxVersion + 1}`;
      }

      setCalculatedVersion(version);
      const adName = `${campaign} | ${audienceType} | ${creativeType} | ${version}`;
      setGeneratedAdName(adName);

      // Generate UTM URL if landing page is selected
      if (landingPageId && source && medium) {
        const selectedLandingPage = landingPages.find(lp => lp.id === landingPageId);
        if (selectedLandingPage) {
          const baseUrl = selectedLandingPage.url;
          const separator = baseUrl.includes('?') ? '&' : '?';
          
          const params = new URLSearchParams({
            utm_source: slugify(source),
            utm_medium: slugify(medium),
            utm_campaign: slugify(campaign),
            utm_audience: slugify(audienceType),
            utm_content: creativeType,
            utm_version: version
          });

          setGeneratedUtmUrl(`${baseUrl}${separator}${params.toString()}`);
        }
      } else {
        setGeneratedUtmUrl("");
      }
    };

    updateGeneratedValues();
  }, [campaign, audienceType, selectedCreatives, landingPageId, source, medium, ad, landingPages, adSetName, user, campaignId]);

  // Auto-generate display link when landing page changes
  useEffect(() => {
    // Only auto-generate if display link is empty or if landing page has changed
    if (landingPageId && (!displayLink || (ad && ad.landing_page_id !== landingPageId))) {
      const selectedLandingPage = landingPages.find(lp => lp.id === landingPageId);
      if (selectedLandingPage?.url) {
        try {
          const url = new URL(selectedLandingPage.url);
          const domain = url.hostname.replace(/^www\./, ''); // Remove www. prefix
          setDisplayLink(`www.${domain}`);
        } catch (error) {
          // If URL parsing fails, just use the domain part
          const domain = selectedLandingPage.url.split('/')[2] || selectedLandingPage.url;
          setDisplayLink(domain.replace(/^www\./, ''));
        }
      }
    } else if (!landingPageId) {
      setDisplayLink("");
    }
  }, [landingPageId, landingPages]);

  // Filtered messages by campaign (remove duplicates)
  const filteredHeadlines = campaignMessaging.headlines
    .map((h, index) => ({ id: `headline-${index}`, value: h }))
    .filter((h, index, self) => 
      index === self.findIndex(t => t.value === h.value)
    );
  
  const filteredPrimaryTexts = campaignMessaging.primaryTexts
    .map((pt, index) => ({ id: `primary-${index}`, value: pt }))
    .filter((pt, index, self) => 
      index === self.findIndex(t => t.value === pt.value)
    );

  // Handle adding new headline
  const handleAddNewHeadline = async () => {
    if (!newHeadlineText.trim()) {
      showError("Headline cannot be empty");
      return;
    }

    // Check for duplicates
    const exists = filteredHeadlines.some(h => h.value === newHeadlineText.trim());
    if (exists) {
      showError("This headline already exists in the campaign");
      setNewHeadlineText("");
      setShowAddHeadline(false);
      return;
    }

    setIsAddingHeadline(true);
    try {
      // Get the current campaign
      const { data: campaignData, error: fetchError } = await supabase
        .from("campaigns")
        .select("messaging")
        .eq("user_id", user!.id)
        .eq("name", campaign)
        .single();

      if (fetchError) throw fetchError;

      const messaging = campaignData?.messaging as any || {};
      const adMessaging = messaging.adMessaging || { headlines: [], primaryTexts: [] };
      
      // Add new headline
      const updatedHeadlines = [...(adMessaging.headlines || []), newHeadlineText.trim()];
      
      // Update the campaign
      const { error: updateError } = await supabase
        .from("campaigns")
        .update({
          messaging: {
            ...messaging,
            adMessaging: {
              ...adMessaging,
              headlines: updatedHeadlines
            }
          }
        })
        .eq("user_id", user!.id)
        .eq("name", campaign);

      if (updateError) throw updateError;

      showSuccess("New headline added to campaign");
      
      // Update local state
      setCampaignMessaging(prev => ({
        ...prev,
        headlines: updatedHeadlines
      }));
      
      // Select the new headline
      setHeadline(newHeadlineText.trim());
      setNewHeadlineText("");
      setShowAddHeadline(false);
    } catch (error: any) {
      showError(error.message || "Couldn't add headline. Please try again.");
    } finally {
      setIsAddingHeadline(false);
    }
  };

  // Handle adding new primary text
  const handleAddNewPrimaryText = async () => {
    if (!newPrimaryTextText.trim()) {
      showError("Body cannot be empty");
      return;
    }

    // Check for duplicates
    const exists = filteredPrimaryTexts.some(pt => pt.value === newPrimaryTextText.trim());
    if (exists) {
      showError("This body text already exists in the campaign");
      setNewPrimaryTextText("");
      setShowAddPrimaryText(false);
      return;
    }

    setIsAddingPrimaryText(true);
    try {
      // Get the current campaign
      const { data: campaignData, error: fetchError } = await supabase
        .from("campaigns")
        .select("messaging")
        .eq("user_id", user!.id)
        .eq("name", campaign)
        .single();

      if (fetchError) throw fetchError;

      const messaging = campaignData?.messaging as any || {};
      const adMessaging = messaging.adMessaging || { headlines: [], primaryTexts: [] };
      
      // Add new primary text
      const updatedPrimaryTexts = [...(adMessaging.primaryTexts || []), newPrimaryTextText.trim()];
      
      // Update the campaign
      const { error: updateError } = await supabase
        .from("campaigns")
        .update({
          messaging: {
            ...messaging,
            adMessaging: {
              ...adMessaging,
              primaryTexts: updatedPrimaryTexts
            }
          }
        })
        .eq("user_id", user!.id)
        .eq("name", campaign);

      if (updateError) throw updateError;

      showSuccess("New body text added to campaign");
      
      // Update local state
      setCampaignMessaging(prev => ({
        ...prev,
        primaryTexts: updatedPrimaryTexts
      }));
      
      // Select the new primary text
      setPrimaryText(newPrimaryTextText.trim());
      setNewPrimaryTextText("");
      setShowAddPrimaryText(false);
    } catch (error: any) {
      showError(error.message || "Couldn't add body text. Please try again.");
    } finally {
      setIsAddingPrimaryText(false);
    }
  };

  // Handle adding new landing page
  const handleAddNewLandingPage = async () => {
    if (!newLandingPageName.trim() || !newLandingPageUrl.trim()) {
      showError("Landing page name and URL are required");
      return;
    }

    setIsAddingLandingPage(true);
    try {
      const { data, error } = await supabase
        .from("landing_pages")
        .insert({
          name: newLandingPageName.trim(),
          url: newLandingPageUrl.trim(),
          user_id: user!.id
        })
        .select()
        .single();

      if (error) throw error;

      // Link to campaign via messaging_landing_pages
      if (campaign && data) {
        const { data: messagingRecords } = await supabase
          .from("messaging_matrix")
          .select("id")
          .eq("user_id", user!.id)
          .eq("campaign", campaign);

        if (messagingRecords && messagingRecords.length > 0) {
          for (const messagingRecord of messagingRecords) {
            await supabase.from("messaging_landing_pages").insert({
              messaging_id: messagingRecord.id,
              landing_page_id: data.id
            });
          }
        }
      }

      showSuccess("New landing page added to campaign");
      
      // Refresh landing pages
      await fetchLandingPages();
      
      // Select the new landing page
      setLandingPageId(data.id);
      setNewLandingPageName("");
      setNewLandingPageUrl("");
      setShowAddLandingPage(false);
    } catch (error: any) {
      showError(error.message || "Couldn't add landing page. Please try again.");
    } finally {
      setIsAddingLandingPage(false);
    }
  };

  // State for filtered landing pages
  const [filteredLandingPages, setFilteredLandingPages] = useState<LandingPage[]>([]);

  // Filter landing pages by campaign
  useEffect(() => {
    const filterLandingPages = async () => {
      console.log('[EditAdDrawer] Filtering landing pages:', {
        campaign,
        landingPagesCount: landingPages.length,
        landingPageId,
        hasUser: !!user
      });
      
      // If no campaign or landingPages not yet loaded, show all or wait
      if (!campaign || !user || landingPages.length === 0) {
        // If we have a landingPageId but landingPages isn't loaded yet, wait
        if (landingPageId && landingPages.length === 0) {
          console.log('[EditAdDrawer] Waiting for landing pages to load');
          return;
        }
        console.log('[EditAdDrawer] Setting all landing pages as filtered');
        setFilteredLandingPages(landingPages);
        return;
      }
      
      // Filter by campaign's campaigns array in landing_pages
      let filtered = landingPages.filter(lp => 
        lp.campaigns && lp.campaigns.includes(campaign)
      );
      
      console.log('[EditAdDrawer] Filtered by campaign:', filtered);
      
      // Always include the ad's current landing page if it exists and isn't already in the list
      if (landingPageId && !filtered.find(lp => lp.id === landingPageId)) {
        const currentLandingPage = landingPages.find(lp => lp.id === landingPageId);
        console.log('[EditAdDrawer] Adding current LP to filtered list:', currentLandingPage);
        if (currentLandingPage) {
          filtered = [currentLandingPage, ...filtered];
        }
      }
      
      console.log('[EditAdDrawer] Final filtered landing pages:', filtered);
      setFilteredLandingPages(filtered);
    };
    
    filterLandingPages();
  }, [campaign, landingPages, user, landingPageId]);

  const handleNext = () => {
    if (!campaign?.trim()) {
      showError("Campaign is required");
      return;
    }
    if (!source.trim()) {
      showError("Source is required");
      return;
    }
    if (!medium.trim()) {
      showError("Medium is required");
      return;
    }
    if (!audienceType.trim()) {
      showError("Audience type is required");
      return;
    }
    setCurrentStep(2);
  };

  const handleBack = () => {
    setCurrentStep(1);
  };

  const handleSave = async () => {
    if (!landingPageId) {
      showError("Landing page is required");
      return;
    }

    if (!ad) return;

    setLoading(true);
    try {
      const selectedLandingPage = landingPages.find(lp => lp.id === landingPageId);
      const creativeType = getCreativeType();
      
      // Build UTM URL with all parameters - slugify ad name to convert pipes to underscores
      const slugifiedAdName = generatedAdName.toLowerCase().replace(/\s*\|\s*/g, '_').replace(/\s+/g, '_');
      const landingPageUrlWithUtm = buildUTMUrl(
        selectedLandingPage?.url || "",
        source,
        medium,
        campaign,
        slugifiedAdName // Use slugified ad name as utm_content
      );
      
      const { error } = await supabase
        .from("ads")
        .update({
          audience_type: audienceType,
          ad_format: creativeType,
          creative_type: "Page Post Ad",
          version: calculatedVersion || ad.version,
          landing_page_url: selectedLandingPage?.url || "",
          landing_page_id: landingPageId,
          landing_page_url_with_utm: landingPageUrlWithUtm,
          display_link: displayLink || null,
          status,
          headline: headline || null,
          body: primaryText || null,
          medium: medium || null,
          source: source || null,
          cta_label: cta || null,
          ad_name: generatedAdName,
          ad_set_name: adSetName || generatedAdSetName,
          objective: objective || null,
          campaign_budget: campaignBudget ? parseFloat(campaignBudget) : null,
          start_time: startTime?.toISOString() || null
        } as any)
        .eq("id", ad.id)
        .eq("user_id", user!.id);

      if (error) throw error;

      // Update ad-creative relationships
      await supabase.from("ad_creatives").delete().eq("ad_id", ad.id);
      
      if (selectedCreatives.length > 0) {
        const adCreatives = selectedCreatives.map((creative, index) => ({
          ad_id: ad.id,
          creative_id: creative.id,
          position: index
        }));
        await supabase.from("ad_creatives").insert(adCreatives);
      }

      showSuccess("Ad changes saved");
      handleClose();
      onSuccess?.();
    } catch (error: any) {
      showError(error.message || "Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setCurrentStep(1);
    onClose();
  };

  if (!open || !ad) return null;

  return (
    <>
      <DrawerPanel
        open={open}
        onClose={handleClose}
        title="Edit Ad"
        currentStep={currentStep}
        totalSteps={2}
        hasNestedDrawer={showCreativePicker || showCreateCreative || showLandingPagePicker || showCreateLandingPage}
        showBack={currentStep === 2}
        showNext={currentStep === 1}
        showSave={currentStep === 2}
        onBack={handleBack}
        onNext={handleNext}
        onSave={handleSave}
        nextDisabled={!campaign?.trim() || !source.trim() || !medium.trim() || !audienceType.trim()}
        saveLabel={loading ? "Saving..." : "Save"}
        bodyClassName={currentStep === 2 ? "p-0" : undefined}
        zIndex={1200}
      >
        {currentStep === 1 ? (
          <div className="space-y-2.5 px-3 py-3">
            {/* Status */}
            <div className="space-y-2">
              <Label htmlFor="ad-status" className="text-sm font-medium">
                Status <span className="text-destructive">*</span>
              </Label>
              <Select value={status} onValueChange={setStatus}>
                <SelectTrigger id="ad-status" className="w-full">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="z-[1500]">
                  <SelectItem value="Draft">Draft</SelectItem>
                  <SelectItem value="Active">Active</SelectItem>
                  <SelectItem value="Paused">Paused</SelectItem>
                  <SelectItem value="Archived">Archived</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Source */}
            <div className="space-y-2">
              <Label htmlFor="ad-source" className="text-sm font-medium">
                Source <span className="text-destructive">*</span>
              </Label>
              {!showCustomSource ? (
                <Select
                  value={source}
                  onValueChange={(value) => {
                    if (value === "+Add") {
                      setShowCustomSource(true);
                      setCustomSource("");
                    } else {
                      setSource(value);
                      setMedium(getMediumForSource(value));
                      setCta("");
                    }
                  }}
                >
                  <SelectTrigger id="ad-source" className="w-full">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="z-[1500]">
                    <SelectItem value="Meta">Meta</SelectItem>
                    <SelectItem value="LinkedIn">LinkedIn</SelectItem>
                    <SelectItem value="Google">Google</SelectItem>
                    <SelectItem value="TikTok">TikTok</SelectItem>
                    <SelectItem value="YouTube">YouTube</SelectItem>
                    <SelectItem value="+Add">+ Add</SelectItem>
                  </SelectContent>
                </Select>
              ) : (
                <div className="flex gap-2">
                  <Input
                    value={customSource}
                    onChange={(e) => setCustomSource(e.target.value)}
                    placeholder="Enter custom source"
                    autoFocus
                  />
                  <Button
                    type="button"
                    size="sm"
                    onClick={() => {
                      if (customSource.trim()) {
                        setSource(customSource.trim());
                        setMedium(getMediumForSource(customSource.trim()));
                        setShowCustomSource(false);
                        setCta("");
                      }
                    }}
                  >
                    Add
                  </Button>
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      setShowCustomSource(false);
                      setSource("Meta");
                    }}
                  >
                    Cancel
                  </Button>
                </div>
              )}
            </div>

            {/* Medium */}
            <div className="space-y-2">
              <Label htmlFor="ad-medium" className="text-sm font-medium">
                Medium <span className="text-destructive">*</span>
              </Label>
              <Select
                value={medium}
                onValueChange={setMedium}
              >
                <SelectTrigger id="ad-medium" className="w-full">
                  <SelectValue placeholder="Select medium" />
                </SelectTrigger>
                <SelectContent className="z-[1500]">
                  <SelectItem value="paid_social">paid_social</SelectItem>
                  <SelectItem value="cpc">cpc</SelectItem>
                  <SelectItem value="paid_video">paid_video</SelectItem>
                  <SelectItem value="display">display</SelectItem>
                  <SelectItem value="organic">organic</SelectItem>
                  <SelectItem value="email">email</SelectItem>
                  {medium && !["paid_social", "cpc", "paid_video", "display", "organic", "email"].includes(medium) && (
                    <SelectItem value={medium}>{medium}</SelectItem>
                  )}
                </SelectContent>
              </Select>
            </div>

            {/* Campaign */}
            <div className="space-y-2">
              <Label htmlFor="ad-campaign" className="text-sm font-medium">
                Campaign <span className="text-destructive">*</span>
              </Label>
              <Select value={campaign} onValueChange={setCampaign}>
                <SelectTrigger id="ad-campaign" className="w-full">
                  <SelectValue placeholder="Select campaign" />
                </SelectTrigger>
                <SelectContent className="z-[1500]">
                  {campaigns.map((c) => (
                    <SelectItem key={c} value={c}>
                      {c}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Audience Type */}
            <div className="space-y-2">
              <Label htmlFor="ad-audience" className="text-sm font-medium">
                Audience Type <span className="text-destructive">*</span>
              </Label>
              <Select 
                value={audienceType} 
                onValueChange={setAudienceType}
              >
                <SelectTrigger id="ad-audience" className="w-full">
                  <SelectValue placeholder="Select audience type" />
                </SelectTrigger>
                <SelectContent className="z-[1500]">
                  <SelectItem value="Retargeting">Retargeting</SelectItem>
                  <SelectItem value="Lookalike">Lookalike</SelectItem>
                  <SelectItem value="Re-engagement">Re-engagement</SelectItem>
                  <SelectItem value="+Add">+ Add</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Ad Set Name */}
            <div className="space-y-2">
              <Label htmlFor="ad-set-name" className="text-sm font-medium">
                Ad Set Name
              </Label>
              <Input
                id="ad-set-name"
                value={adSetName}
                onChange={(e) => setAdSetName(e.target.value)}
                placeholder="Optional – auto-generated if left blank."
              />
            </div>



            {/* Attach Creative */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">Creative (Optional)</Label>
              <div className="flex gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowCreativePicker(true)}
                  className="flex-1 justify-start"
                >
                  <ImageIcon className="h-4 w-4 mr-2" />
                  Choose from Library
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowCreateCreative(true)}
                  className="flex-1 justify-start"
                >
                  <ImageIcon className="h-4 w-4 mr-2" />
                  Create New
                </Button>
              </div>
              {selectedCreatives.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {selectedCreatives.map((creative) => (
                    <Badge
                      key={creative.id}
                      variant="secondary"
                      className="pr-1"
                    >
                      {creative.creative_name}
                      <button
                        onClick={() => setSelectedCreatives(prev => 
                          prev.filter(c => c.id !== creative.id)
                        )}
                        className="ml-1 hover:text-destructive"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="flex h-full">
            {/* Left: Ad Preview Panel */}
            <div className="w-[45%] bg-muted/30 p-6 border-r overflow-y-auto">
              <div className="sticky top-0">
                {/* Ad Card Preview */}
                <div className="bg-background rounded-lg border shadow-sm overflow-hidden">
                  {/* Sponsored Label */}
                  <div className="px-4 pt-3 pb-2">
                    <p className="text-xs text-muted-foreground font-medium">Sponsored</p>
                  </div>

                  {/* Body (above media) */}
                  {primaryText && (
                    <div className="px-4 pb-3">
                      <p className="text-sm text-foreground leading-relaxed line-clamp-3">
                        {primaryText}
                      </p>
                    </div>
                  )}
                  
                  {/* Creative Preview */}
                  <div className="relative bg-muted flex items-center justify-center min-h-[200px]">
                    {selectedCreatives.length > 0 && selectedCreatives[0].file_url ? (
                      selectedCreatives[0].creative_type === 'Video' ? (
                        <video
                          src={selectedCreatives[0].file_url}
                          className="w-full h-auto max-h-[400px] object-contain"
                          controls
                          loop
                        />
                      ) : (
                        <img
                          src={selectedCreatives[0].file_url}
                          alt={selectedCreatives[0].creative_name}
                          className="w-full h-auto max-h-[400px] object-contain"
                        />
                      )
                    ) : (
                      <div className="text-center p-8">
                        <ImageIcon className="w-12 h-12 mx-auto mb-2 text-muted-foreground/50" />
                        <p className="text-sm text-muted-foreground">
                          Creative preview will appear here
                        </p>
                      </div>
                    )}
                    
                    {/* Ad Type Badge */}
                    <div className="absolute top-2 right-2">
                      <Badge variant="secondary" className="bg-background/90 backdrop-blur-sm text-xs">
                        {getCreativeType()}
                      </Badge>
                    </div>
                  </div>
                  
                  {/* Ad Content Below Media */}
                  <div className="p-4 space-y-3">
                    {/* Headline */}
                    {headline && (
                      <h4 className="font-semibold text-base leading-tight">
                        {headline}
                      </h4>
                    )}
                    
                    {/* Landing Page URL */}
                    {landingPageId && (
                      <p className="text-xs text-muted-foreground uppercase tracking-wide truncate">
                        {landingPages.find(lp => lp.id === landingPageId)?.url ? 
                          new URL(landingPages.find(lp => lp.id === landingPageId)!.url).hostname : ''}
                      </p>
                    )}
                    
                    {/* CTA Button */}
                    {cta && (
                      <button className="w-full py-2.5 bg-emerald-500 text-white font-semibold rounded-md hover:bg-emerald-600 transition-colors text-sm shadow-sm">
                        {cta}
                      </button>
                    )}
                  </div>
                </div>
                
                {/* Empty State Helper */}
                {!headline && !primaryText && (
                  <p className="text-xs text-muted-foreground mt-4 text-center">
                    Fill out the form fields to see your ad preview update in real-time
                  </p>
                )}
              </div>
            </div>

            {/* Right: Form Fields */}
            <div className="flex-1 overflow-y-auto py-6 px-6 space-y-5">
              {/* Auto-generated Ad Name */}
              <div className="space-y-2">
                <Label htmlFor="ad-name-generated" className="text-sm font-medium">
                  Ad Name
                </Label>
                <Input
                  id="ad-name-generated"
                  value={generatedAdName}
                  onChange={(e) => setGeneratedAdName(e.target.value)}
                  placeholder="Auto-generated"
                />
              </div>

              {/* Headline */}
              <div className="space-y-2">
                <Label htmlFor="ad-headline" className="text-sm font-medium">
                  Headline <span className="text-destructive">*</span>
                </Label>
                <Select 
                  value={headline || undefined} 
                  onValueChange={(value) => {
                    if (value === "__add_new__") {
                      setShowAddHeadline(true);
                    } else {
                      setHeadline(value);
                    }
                  }}
                  disabled={!campaign}
                >
                  <SelectTrigger id="ad-headline" className="w-full">
                    <SelectValue placeholder={campaign ? "Select headline…" : "Select a campaign first"} />
                  </SelectTrigger>
                  <SelectContent className="z-[1500]">
                    {filteredHeadlines.map((h) => (
                      <SelectItem key={h.id} value={h.value}>
                        {h.value}
                      </SelectItem>
                    ))}
                    {filteredHeadlines.length > 0 && (
                      <div className="px-2 py-1.5">
                        <div className="border-t border-border" />
                      </div>
                    )}
                    <SelectItem value="__add_new__" className="text-primary">
                      + Add New Headline
                    </SelectItem>
                  </SelectContent>
                </Select>
                
                {/* Add New Headline Dialog */}
                {showAddHeadline && (
                  <div className="mt-2 p-3 border border-border rounded-md bg-muted/50">
                    <Label htmlFor="new-headline" className="text-sm font-medium mb-2 block">
                      New Headline
                    </Label>
                    <Input
                      id="new-headline"
                      value={newHeadlineText}
                      onChange={(e) => setNewHeadlineText(e.target.value)}
                      placeholder="Enter headline text…"
                      className="mb-2"
                      autoFocus
                    />
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        onClick={handleAddNewHeadline}
                        disabled={isAddingHeadline || !newHeadlineText.trim()}
                      >
                        {isAddingHeadline ? "Adding..." : "Add"}
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          setShowAddHeadline(false);
                          setNewHeadlineText("");
                        }}
                      >
                        Cancel
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              {/* Body */}
              <div className="space-y-2">
                <Label htmlFor="ad-primary-text" className="text-sm font-medium">
                  Body <span className="text-destructive">*</span>
                </Label>
                <Select 
                  value={primaryText || undefined} 
                  onValueChange={(value) => {
                    if (value === "__add_new__") {
                      setShowAddPrimaryText(true);
                    } else {
                      setPrimaryText(value);
                    }
                  }}
                  disabled={!campaign}
                >
                  <SelectTrigger id="ad-primary-text" className="w-full">
                    <SelectValue placeholder={campaign ? "Select body…" : "Select a campaign first"} />
                  </SelectTrigger>
                  <SelectContent className="z-[1500]">
                    {filteredPrimaryTexts.map((p) => (
                      <SelectItem key={p.id} value={p.value}>
                        {p.value.substring(0, 50)}...
                      </SelectItem>
                    ))}
                    {filteredPrimaryTexts.length > 0 && (
                      <div className="px-2 py-1.5">
                        <div className="border-t border-border" />
                      </div>
                    )}
                    <SelectItem value="__add_new__" className="text-primary">
                      + Add New Body Text
                    </SelectItem>
                  </SelectContent>
                </Select>
                
                {/* Add New Body Text Dialog */}
                {showAddPrimaryText && (
                  <div className="mt-2 p-3 border border-border rounded-md bg-muted/50">
                    <Label htmlFor="new-primary-text" className="text-sm font-medium mb-2 block">
                      New Body Text
                    </Label>
                    <Textarea
                      id="new-primary-text"
                      value={newPrimaryTextText}
                      onChange={(e) => setNewPrimaryTextText(e.target.value)}
                      placeholder="Enter body text…"
                      className="mb-2 min-h-[80px]"
                      autoFocus
                    />
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        onClick={handleAddNewPrimaryText}
                        disabled={isAddingPrimaryText || !newPrimaryTextText.trim()}
                      >
                        {isAddingPrimaryText ? "Adding..." : "Add"}
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          setShowAddPrimaryText(false);
                          setNewPrimaryTextText("");
                        }}
                      >
                        Cancel
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              {/* Landing Page */}
              <div className="space-y-2">
                <Label htmlFor="ad-landing-page" className="text-sm font-medium">
                  Destination URL <span className="text-destructive">*</span>
                </Label>
                <Select 
                  value={landingPageId || undefined} 
                  onValueChange={(value) => {
                    if (value === "__add_new__") {
                      setShowAddLandingPage(true);
                    } else {
                      setLandingPageId(value);
                    }
                  }}
                  disabled={!campaign}
                >
                  <SelectTrigger id="ad-landing-page" className="w-full">
                    <SelectValue placeholder={campaign ? "Select landing page…" : "Select a campaign first"} />
                  </SelectTrigger>
                  <SelectContent className="z-[1500]">
                    {filteredLandingPages.map((lp) => (
                      <SelectItem key={lp.id} value={lp.id}>
                        {lp.name || lp.url}
                      </SelectItem>
                    ))}
                    {filteredLandingPages.length > 0 && (
                      <div className="px-2 py-1.5">
                        <div className="border-t border-border" />
                      </div>
                    )}
                    <SelectItem value="__add_new__" className="text-primary">
                      + Add New Landing Page
                    </SelectItem>
                  </SelectContent>
                </Select>
                
                {/* Add New Landing Page Dialog */}
                {showAddLandingPage && (
                  <div className="mt-2 p-3 border border-border rounded-md bg-muted/50 space-y-3">
                    <div>
                      <Label htmlFor="new-lp-name" className="text-sm font-medium mb-2 block">
                        Landing Page Name <span className="text-destructive">*</span>
                      </Label>
                      <Input
                        id="new-lp-name"
                        value={newLandingPageName}
                        onChange={(e) => setNewLandingPageName(e.target.value)}
                        placeholder="e.g., Homepage Q1 2024"
                        className="mb-2"
                        autoFocus
                      />
                    </div>
                    <div>
                      <Label htmlFor="new-lp-url" className="text-sm font-medium mb-2 block">
                        URL <span className="text-destructive">*</span>
                      </Label>
                      <Input
                        id="new-lp-url"
                        value={newLandingPageUrl}
                        onChange={(e) => setNewLandingPageUrl(e.target.value)}
                        placeholder="https://example.com/landing-page"
                        type="url"
                      />
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        onClick={handleAddNewLandingPage}
                        disabled={isAddingLandingPage || !newLandingPageName.trim() || !newLandingPageUrl.trim()}
                      >
                        {isAddingLandingPage ? "Adding..." : "Add"}
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          setShowAddLandingPage(false);
                          setNewLandingPageName("");
                          setNewLandingPageUrl("");
                        }}
                      >
                        Cancel
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              {/* CTA */}
              <div className="space-y-2">
                <Label htmlFor="ad-cta" className="text-sm font-medium">
                  Call-to-Action <span className="text-destructive">*</span>
                </Label>
                <Select value={cta || undefined} onValueChange={setCta}>
                  <SelectTrigger id="ad-cta" className="w-full">
                    <SelectValue placeholder="Select CTA" />
                  </SelectTrigger>
                  <SelectContent className="z-[1500]">
                    {availableCtAs.map((ctaOption) => (
                      <SelectItem key={ctaOption} value={ctaOption}>
                        {ctaOption}
                      </SelectItem>
                    ))}
                  </SelectContent>
                  </Select>
                </div>

                {/* Display Link */}
                <div className="space-y-2">
                  <Label htmlFor="ad-display-link" className="text-sm font-medium">
                    Display Link
                  </Label>
                  <Input
                    id="ad-display-link"
                    value={displayLink}
                    onChange={(e) => setDisplayLink(e.target.value)}
                    placeholder="www.example.com"
                  />
                </div>

              {/* Generated UTM URL */}
              {generatedUtmUrl && (
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Generated UTM URL</Label>
                  <div className="p-3 bg-muted rounded-md">
                    <code className="text-xs block break-all whitespace-normal">{decodeURIComponent(generatedUtmUrl)}</code>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </DrawerPanel>

      {/* Nested Modals */}
      <CreativePickerModal
        open={showCreativePicker}
        onOpenChange={setShowCreativePicker}
        onSelect={(creatives) => {
          setSelectedCreatives(creatives);
          setShowCreativePicker(false);
        }}
        allowMultiple={true}
      />

      <AddNewCreativeDrawer
        open={showCreateCreative}
        onClose={() => setShowCreateCreative(false)}
        onSuccess={(creative) => {
          if (creative) {
            setSelectedCreatives([creative]);
          }
          setShowCreateCreative(false);
        }}
      />


      <AddNewLandingPageDrawer
        open={showCreateLandingPage}
        onClose={() => setShowCreateLandingPage(false)}
        onSuccess={(lp) => {
          if (lp) {
            setLandingPageId(lp.id);
          }
          setShowCreateLandingPage(false);
        }}
        contextCampaign={campaign}
      />
    </>
  );
}
